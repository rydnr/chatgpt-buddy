#+TITLE: ATDD in ChatGPT-Buddy: Test-Driven Browser Automation
#+AUTHOR: Claude Code (Anthropic)
#+DATE: 2025-06-29

* Introduction: The ATDD Paradigm for Browser Extensions

** Why ATDD for Browser Automation?
Acceptance Test-Driven Development (ATDD) is particularly powerful for browser extension development because:

- **Browser interactions are inherently integration-heavy**: Unit tests can't verify DOM manipulation
- **UI changes frequently**: ChatGPT's interface evolves, requiring adaptive testing
- **Complex event flows**: Client → Server → Extension → Browser Tab requires end-to-end validation
- **User experience focused**: Acceptance criteria naturally match user stories

** The Missing Link: Extension-to-Tab Interaction
Our current walking skeleton has excellent event-driven architecture but lacks the crucial piece:
*How does the browser extension actually manipulate the ChatGPT tab?*

#+BEGIN_QUOTE
"We have the messaging infrastructure, but no one has defined what happens when messages arrive at the browser tab. ATDD with Playwright will be our specification for browser interactions."
#+END_QUOTE

* ATDD Workflow for ChatGPT-Buddy

** The Three-Layer Testing Strategy

#+BEGIN_SRC ascii
┌─────────────────────────────────────────┐
│           ACCEPTANCE TESTS              │ ← Playwright E2E tests
│         (Playwright + Browser)         │   Define user behavior
├─────────────────────────────────────────┤
│          INTEGRATION TESTS              │ ← HTTP + WebSocket tests  
│      (Server + Client + Extension)     │   Verify component communication
├─────────────────────────────────────────┤
│             UNIT TESTS                  │ ← Jest tests
│    (Domain Logic + Event Handling)     │   Verify business rules
└─────────────────────────────────────────┘
#+END_SRC

** ATDD Cycle for Browser Features

1. **🧪 RED**: Write failing Playwright test defining desired browser behavior
2. **✅ GREEN**: Implement content script DOM manipulation to pass the test
3. **🚀 REFACTOR**: Improve browser interaction patterns while keeping tests green

* Defining Browser Interactions Through Tests

** The Specification-First Approach

Instead of guessing how the extension should interact with ChatGPT, we let Playwright tests define the specification:

#+BEGIN_SRC typescript
// This test DEFINES how project selection should work
test('should select ChatGPT project through automation', async ({ page }) => {
  // GIVEN: User is on ChatGPT with multiple projects
  await page.goto('https://chatgpt.com');
  await page.waitForSelector('[data-testid="project-selector"]');
  
  // WHEN: Client SDK requests project selection
  const client = new ChatGPTBuddyClient({ serverUrl: TEST_SERVER_URL });
  await client.selectProject('python-development');
  
  // THEN: ChatGPT interface shows the selected project
  await expect(page.locator('[data-testid="active-project"]'))
    .toContainText('python-development');
    
  // AND: Project dropdown is closed
  await expect(page.locator('[data-testid="project-dropdown"]'))
    .not.toBeVisible();
});
#+END_SRC

This test *specifies* that:
- There should be a project selector element
- Project selection should be visually confirmed
- The dropdown should close after selection

** Browser Interaction Domain Events

We extend our event-driven architecture to include browser-specific events:

#+BEGIN_SRC typescript
// Domain Events for Browser Interactions
export class ProjectSelectionRequested extends Event {
  constructor(public readonly payload: { 
    projectName: string;
    correlationId: string;
  }) { super(); }
}

export class DOMElementClicked extends Event {
  constructor(public readonly payload: {
    selector: string;
    expectedOutcome: string;
    correlationId: string;
  }) { super(); }
}

export class PageStateVerified extends Event {
  constructor(public readonly payload: {
    verification: 'project-selected' | 'chat-opened' | 'response-received';
    actualState: string;
    correlationId: string;
  }) { super(); }
}
#+END_SRC

* The Browser Interaction Specification Process

** Step 1: Define User Journey in Playwright
#+BEGIN_SRC typescript
test.describe('Complete ChatGPT Automation Flow', () => {
  test('user automates prompt submission and response retrieval', async ({ page }) => {
    // ARRANGE: Set up ChatGPT environment
    await setupChatGPTEnvironment(page);
    
    // ACT: Execute automation through client SDK
    const client = new ChatGPTBuddyClient({ serverUrl: TEST_SERVER_URL });
    
    await client.selectProject('web-development');
    await client.selectChat('React Best Practices');
    await client.submitPrompt('What are React hooks?');
    const response = await client.getLatestResponse();
    
    // ASSERT: Verify each step in the browser
    await expect(page.locator('[data-project="web-development"]')).toBeVisible();
    await expect(page.locator('[data-chat-title="React Best Practices"]')).toBeVisible();
    await expect(page.locator('[data-testid="user-message"]').last()).toContainText('What are React hooks?');
    await expect(page.locator('[data-testid="assistant-message"]').last()).toBeVisible();
    
    // ASSERT: Verify client SDK received correct response
    expect(response.content).toContain('hooks');
    expect(response.correlationId).toBeDefined();
  });
});
#+END_SRC

** Step 2: Implement Browser Manipulation Logic
The failing test drives us to implement actual DOM manipulation:

#+BEGIN_SRC typescript
// packages/chatgpt-buddy-extension/src/domain/browser-automation.handler.ts
export class BrowserAutomationHandler {
  
  @listen(ProjectSelectionRequested)
  public async selectProject(event: ProjectSelectionRequested): Promise<ProjectSelected | ProjectSelectionFailed> {
    try {
      // Find project selector (guided by Playwright test expectations)
      const projectSelector = document.querySelector('[data-testid="project-selector"]');
      if (!projectSelector) {
        throw new Error('Project selector not found');
      }
      
      // Click to open dropdown
      projectSelector.click();
      await this.waitForElement('[data-testid="project-dropdown"]');
      
      // Find and click specific project
      const projectOption = document.querySelector(`[data-project="${event.payload.projectName}"]`);
      if (!projectOption) {
        throw new Error(`Project ${event.payload.projectName} not found`);
      }
      
      projectOption.click();
      
      // Wait for UI update (as specified in Playwright test)
      await this.waitForElement('[data-testid="active-project"]');
      
      return new ProjectSelected({
        projectName: event.payload.projectName,
        correlationId: event.payload.correlationId
      });
      
    } catch (error) {
      return new ProjectSelectionFailed({
        projectName: event.payload.projectName,
        error: error.message,
        correlationId: event.payload.correlationId
      });
    }
  }
  
  private async waitForElement(selector: string, timeout = 5000): Promise<Element> {
    return new Promise((resolve, reject) => {
      const element = document.querySelector(selector);
      if (element) return resolve(element);
      
      const observer = new MutationObserver(() => {
        const element = document.querySelector(selector);
        if (element) {
          observer.disconnect();
          resolve(element);
        }
      });
      
      observer.observe(document.body, { childList: true, subtree: true });
      
      setTimeout(() => {
        observer.disconnect();
        reject(new Error(`Element ${selector} not found within ${timeout}ms`));
      }, timeout);
    });
  }
}
#+END_SRC

** Step 3: Content Script Integration
#+BEGIN_SRC typescript
// packages/chatgpt-buddy-extension/src/infrastructure/content-script.ts
import { BrowserAutomationHandler } from '../domain/browser-automation.handler';
import { ProjectSelectionRequested } from '@chatgpt-buddy/core';

const automationHandler = new BrowserAutomationHandler();

// Listen for messages from background script
chrome.runtime.onMessage.addListener(async (message, sender, sendResponse) => {
  try {
    let result;
    
    switch (message.type) {
      case 'ProjectSelectionRequested':
        const event = new ProjectSelectionRequested(message.payload);
        result = await automationHandler.selectProject(event);
        break;
        
      default:
        throw new Error(`Unknown message type: ${message.type}`);
    }
    
    sendResponse(result.toJSON());
  } catch (error) {
    sendResponse({
      type: 'Error',
      error: error.message,
      correlationId: message.payload.correlationId
    });
  }
  
  return true; // Indicate async response
});
#+END_SRC

* Browser-Specific Testing Patterns

** Page Object Models for ChatGPT
#+BEGIN_SRC typescript
// tests/page-objects/chatgpt-page.ts
export class ChatGPTPage {
  constructor(private page: Page) {}
  
  async selectProject(projectName: string): Promise<void> {
    await this.page.click('[data-testid="project-selector"]');
    await this.page.waitForSelector('[data-testid="project-dropdown"]');
    await this.page.click(`[data-project="${projectName}"]`);
    await this.page.waitForSelector(`[data-testid="active-project"]:has-text("${projectName}")`);
  }
  
  async openChat(chatTitle: string): Promise<void> {
    await this.page.click('[data-testid="chat-list-toggle"]');
    await this.page.click(`[data-chat-title="${chatTitle}"]`);
    await this.page.waitForSelector(`[data-testid="active-chat"]:has-text("${chatTitle}")`);
  }
  
  async submitPrompt(prompt: string): Promise<void> {
    await this.page.fill('[data-testid="prompt-input"]', prompt);
    await this.page.click('[data-testid="submit-button"]');
    await this.page.waitForSelector('[data-testid="assistant-message"]:last-child');
  }
  
  async getLatestResponse(): Promise<string> {
    return await this.page.textContent('[data-testid="assistant-message"]:last-child');
  }
}
#+END_SRC

** Fixture Management for Consistent Testing
#+BEGIN_SRC typescript
// tests/fixtures/chatgpt-fixtures.ts
export const setupChatGPTEnvironment = async (page: Page) => {
  // Navigate to ChatGPT
  await page.goto('https://chatgpt.com');
  
  // Wait for initial load
  await page.waitForSelector('[data-testid="main-content"]');
  
  // Set up test data if needed
  await injectTestProjects(page);
  await injectTestChats(page);
};

const injectTestProjects = async (page: Page) => {
  // Inject test data for consistent project state
  await page.evaluate(() => {
    (window as any).testProjects = [
      { name: 'web-development', id: 'proj-1' },
      { name: 'python-development', id: 'proj-2' },
      { name: 'data-science', id: 'proj-3' }
    ];
  });
};
#+END_SRC

* ATDD Implementation Strategy

** Phase 1: Single Feature E2E Test
Start with the simplest complete user journey:

#+BEGIN_SRC typescript
test('complete ping automation flow', async ({ page }) => {
  // GIVEN: ChatGPT page is loaded with extension
  await setupChatGPTEnvironment(page);
  
  // WHEN: Client sends ping through automation
  const client = new ChatGPTBuddyClient({ serverUrl: TEST_SERVER_URL });
  const response = await client.automatedPing('Hello from automation');
  
  // THEN: Response indicates successful browser interaction
  expect(response.payload.responseMessage).toContain('Browser automation successful');
  
  // AND: Browser shows evidence of interaction
  await expect(page.locator('[data-testid="automation-indicator"]')).toBeVisible();
});
#+END_SRC

** Phase 2: Feature-by-Feature Expansion
Each new feature starts with a failing Playwright test:

1. **Project Selection**: Test → Implementation → Refactor
2. **Chat Navigation**: Test → Implementation → Refactor  
3. **Prompt Submission**: Test → Implementation → Refactor
4. **Response Extraction**: Test → Implementation → Refactor
5. **Image Downloads**: Test → Implementation → Refactor

** Phase 3: Error Handling and Edge Cases
#+BEGIN_SRC typescript
test('handles ChatGPT UI changes gracefully', async ({ page }) => {
  // GIVEN: ChatGPT interface has changed
  await page.addStyleTag({ content: '[data-testid="project-selector"] { display: none; }' });
  
  // WHEN: Automation attempts project selection
  const client = new ChatGPTBuddyClient({ serverUrl: TEST_SERVER_URL });
  const response = await client.selectProject('web-development');
  
  // THEN: Graceful degradation occurs
  expect(response.status).toBe('error');
  expect(response.error).toContain('Project selector not available');
  
  // AND: Fallback mechanism is used
  await expect(page.locator('[data-testid="fallback-indicator"]')).toBeVisible();
});
#+END_SRC

* Integration with Event-Driven Architecture

** Browser Events as First-Class Domain Events
#+BEGIN_SRC typescript
// Extend our event system for browser interactions
export abstract class BrowserEvent extends Event {
  public abstract readonly targetSelector: string;
  public abstract readonly expectedOutcome: string;
}

export class ElementClickRequested extends BrowserEvent {
  public readonly type = 'ElementClickRequested';
  public readonly targetSelector: string;
  public readonly expectedOutcome: string;
  
  constructor(payload: {
    selector: string;
    expectedState: string;
    correlationId: string;
  }) {
    super();
    this.targetSelector = payload.selector;
    this.expectedOutcome = payload.expectedState;
  }
}
#+END_SRC

** WebSocket Integration for Real-Time Browser Updates
#+BEGIN_SRC typescript
// Server-side WebSocket handler for browser events
@listen(ProjectSelectionRequested)
async handleProjectSelection(event: ProjectSelectionRequested): Promise<void> {
  // Forward to extension via WebSocket
  const extensionConnection = this.getExtensionConnection(event.extensionId);
  if (extensionConnection) {
    extensionConnection.send(JSON.stringify(event.toJSON()));
  }
}
#+END_SRC

* Testing Infrastructure

** Playwright Configuration for Extension Testing
#+BEGIN_SRC typescript
// playwright.config.ts
export default defineConfig({
  projects: [
    {
      name: 'chrome-extension',
      use: {
        ...devices['Desktop Chrome'],
        launchOptions: {
          args: [
            `--load-extension=${path.join(__dirname, './packages/chatgpt-buddy-extension/build')}`,
            '--disable-extensions-except=' + path.join(__dirname, './packages/chatgpt-buddy-extension/build'),
            '--disable-web-security',
            '--disable-features=TranslateUI',
            '--no-first-run',
          ],
        },
      },
    },
  ],
  
  use: {
    baseURL: 'https://chatgpt.com',
    trace: 'on-failure',
    video: 'retain-on-failure',
    screenshot: 'only-on-failure',
  },
  
  webServer: {
    command: 'pnpm dev:server',
    port: 3000,
    reuseExistingServer: !process.env.CI,
  },
});
#+END_SRC

** CI/CD Pipeline Integration
#+BEGIN_SRC yaml
# .github/workflows/atdd.yml
name: ATDD with Playwright

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: pnpm install
        
      - name: Build extension
        run: pnpm build:extension
        
      - name: Install Playwright
        run: npx playwright install
        
      - name: Run ATDD tests
        run: pnpm test:e2e
        
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-results
          path: test-results/
#+END_SRC

* Benefits of ATDD for Browser Automation

** 1. Specification-Driven Development
- Playwright tests become the authoritative specification for browser interactions
- No ambiguity about what "successful automation" means
- Clear acceptance criteria for each feature

** 2. Regression Protection
- Automatically detects when ChatGPT UI changes break automation
- Provides confidence when refactoring browser interaction code
- Validates complete user journeys, not just isolated components

** 3. Living Documentation
- Tests serve as executable documentation of automation capabilities
- New developers can understand expected behavior by reading tests
- Stakeholders can validate requirements through test scenarios

** 4. Cross-Browser Validation
- Ensures automation works across different browser engines
- Validates extension compatibility across platforms
- Tests real-world user environments

* Future Evolution

** Advanced Automation Patterns
- Machine learning for adaptive UI element detection
- Computer vision for visual validation
- Natural language test specifications

** Performance Optimization
- Parallel test execution across browser instances
- Smart test selection based on code changes
- Incremental testing for faster feedback loops

** Monitoring and Observability
- Real-time monitoring of automation success rates
- Performance metrics for browser interactions
- User behavior analytics from automation usage

* Conclusion

ATDD with Playwright transforms browser extension development from a guess-and-check process into a specification-driven discipline. By writing failing tests first, we ensure that every browser interaction is intentional, testable, and maintainable.

The key insight is that **Playwright tests become our specification for how the extension should manipulate the ChatGPT interface**. This eliminates the guesswork and provides a clear path from user requirements to working automation.

#+BEGIN_QUOTE
"In ATDD, the test is not just verification—it's the specification. When we write a Playwright test that expects a project to be selected in the ChatGPT interface, we're not just testing; we're defining exactly how that selection should work."
#+END_QUOTE

This approach ensures our walking skeleton evolves into a robust, user-focused automation tool that actually works in real browsers with real ChatGPT interfaces.