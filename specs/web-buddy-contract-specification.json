{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://schemas.web-buddy.org/contract/v1.0.0/web-buddy-contract.schema.json",
  "title": "Web-Buddy Automation Contract Specification",
  "description": "JSON Schema for declarative web application automation contracts that enable zero-fragility automation",
  "version": "1.0.0",
  "type": "object",
  "required": ["version", "domain", "title", "capabilities"],
  "properties": {
    "version": {
      "type": "string",
      "pattern": "^1\\.0\\.[0-9]+$",
      "description": "Contract specification version (semantic versioning)",
      "examples": ["1.0.0", "1.0.1"]
    },
    "domain": {
      "type": "string",
      "format": "hostname",
      "description": "Domain this contract applies to (e.g., 'chat.openai.com')",
      "examples": ["chat.openai.com", "github.com", "google.com"]
    },
    "title": {
      "type": "string",
      "minLength": 1,
      "maxLength": 100,
      "description": "Human-readable title for this automation contract",
      "examples": ["ChatGPT Web Interface", "GitHub Repository Management", "Google Search"]
    },
    "description": {
      "type": "string",
      "maxLength": 500,
      "description": "Detailed description of what this contract enables",
      "examples": ["Automate ChatGPT conversations, project selection, and response retrieval"]
    },
    "metadata": {
      "type": "object",
      "description": "Contract metadata and versioning information",
      "properties": {
        "author": {
          "type": "string",
          "description": "Contract author or maintainer"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "Contract creation timestamp"
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "description": "Last update timestamp"
        },
        "compatibilityScore": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "description": "Compatibility score with current page version (0-1)"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Searchable tags for contract discovery",
          "examples": [["ai", "chatbot", "conversation"], ["git", "repository", "development"]]
        }
      }
    },
    "context": {
      "type": "object",
      "description": "Context conditions for when this contract applies",
      "properties": {
        "urlPatterns": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "URL patterns this contract applies to (supports wildcards and regex)",
          "examples": [["https://chat.openai.com/*", "https://chatgpt.com/*"]]
        },
        "titlePatterns": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Page title patterns for contract matching"
        },
        "bodyClasses": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Required body CSS classes for contract activation"
        },
        "prerequisites": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PrerequisiteCondition"
          },
          "description": "Conditions that must be met before contract can be used"
        }
      }
    },
    "capabilities": {
      "type": "object",
      "patternProperties": {
        "^[a-zA-Z][a-zA-Z0-9_-]*$": {
          "$ref": "#/definitions/AutomationCapability"
        }
      },
      "description": "Available automation capabilities indexed by capability name",
      "examples": [{
        "searchWeb": {
          "type": "action",
          "description": "Perform web search with query",
          "selector": "#search-input",
          "parameters": [
            {
              "name": "query",
              "type": "string",
              "required": true,
              "description": "Search query text"
            }
          ]
        }
      }]
    },
    "selectors": {
      "type": "object",
      "patternProperties": {
        "^[a-zA-Z][a-zA-Z0-9_-]*$": {
          "$ref": "#/definitions/SelectorDefinition"
        }
      },
      "description": "Reusable selector definitions referenced by capabilities"
    },
    "workflows": {
      "type": "object",
      "patternProperties": {
        "^[a-zA-Z][a-zA-Z0-9_-]*$": {
          "$ref": "#/definitions/WorkflowDefinition"
        }
      },
      "description": "Multi-step automation workflows combining multiple capabilities"
    },
    "events": {
      "type": "object",
      "description": "Event definitions for contract-based communication",
      "properties": {
        "incoming": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EventDefinition"
          },
          "description": "Events this contract can handle"
        },
        "outgoing": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EventDefinition"
          },
          "description": "Events this contract can emit"
        }
      }
    }
  },
  "definitions": {
    "AutomationCapability": {
      "type": "object",
      "required": ["type", "description", "selector"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["action", "query", "navigation", "form", "file", "wait"],
          "description": "Type of automation capability"
        },
        "description": {
          "type": "string",
          "minLength": 1,
          "maxLength": 200,
          "description": "Human-readable description of what this capability does"
        },
        "selector": {
          "oneOf": [
            {
              "type": "string",
              "description": "CSS selector or selector reference"
            },
            {
              "$ref": "#/definitions/SelectorDefinition"
            }
          ]
        },
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ParameterDefinition"
          },
          "description": "Parameters required for this capability"
        },
        "returnType": {
          "$ref": "#/definitions/ReturnTypeDefinition",
          "description": "Expected return type and structure"
        },
        "validation": {
          "$ref": "#/definitions/ValidationRules",
          "description": "Validation rules for parameters and execution"
        },
        "timeout": {
          "type": "integer",
          "minimum": 100,
          "maximum": 60000,
          "description": "Maximum execution timeout in milliseconds",
          "default": 5000
        },
        "retries": {
          "type": "integer",
          "minimum": 0,
          "maximum": 5,
          "description": "Number of retry attempts on failure",
          "default": 2
        },
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecutionCondition"
          },
          "description": "Conditions that must be met before execution"
        },
        "examples": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CapabilityExample"
          },
          "description": "Usage examples for this capability"
        }
      }
    },
    "SelectorDefinition": {
      "type": "object",
      "required": ["primary"],
      "properties": {
        "primary": {
          "type": "string",
          "minLength": 1,
          "description": "Primary CSS selector to use"
        },
        "fallback": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Fallback selectors if primary fails"
        },
        "wait": {
          "$ref": "#/definitions/WaitCondition",
          "description": "Wait conditions before element interaction"
        },
        "validator": {
          "type": "string",
          "description": "JavaScript function body to validate element (return boolean)"
        },
        "frame": {
          "type": "string",
          "description": "CSS selector for iframe if element is in a frame"
        },
        "shadowRoot": {
          "type": "boolean",
          "description": "Whether to search within shadow DOM",
          "default": false
        }
      }
    },
    "ParameterDefinition": {
      "type": "object",
      "required": ["name", "type"],
      "properties": {
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z][a-zA-Z0-9_]*$",
          "description": "Parameter name"
        },
        "type": {
          "type": "string",
          "enum": ["string", "number", "boolean", "object", "array", "file"],
          "description": "Parameter data type"
        },
        "description": {
          "type": "string",
          "description": "Parameter description"
        },
        "required": {
          "type": "boolean",
          "default": false,
          "description": "Whether this parameter is required"
        },
        "default": {
          "description": "Default value if parameter not provided"
        },
        "validation": {
          "$ref": "#/definitions/ParameterValidation",
          "description": "Parameter validation rules"
        },
        "examples": {
          "type": "array",
          "description": "Example values for this parameter"
        }
      }
    },
    "ReturnTypeDefinition": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["void", "string", "number", "boolean", "object", "array"],
          "description": "Return data type"
        },
        "description": {
          "type": "string",
          "description": "Description of return value"
        },
        "schema": {
          "type": "object",
          "description": "JSON Schema for complex return types"
        },
        "examples": {
          "type": "array",
          "description": "Example return values"
        }
      }
    },
    "ValidationRules": {
      "type": "object",
      "properties": {
        "elementExists": {
          "type": "boolean",
          "description": "Validate that target element exists",
          "default": true
        },
        "elementVisible": {
          "type": "boolean",
          "description": "Validate that target element is visible",
          "default": true
        },
        "elementEnabled": {
          "type": "boolean",
          "description": "Validate that target element is enabled",
          "default": true
        },
        "customValidator": {
          "type": "string",
          "description": "JavaScript function body for custom validation"
        }
      }
    },
    "ParameterValidation": {
      "type": "object",
      "properties": {
        "minLength": {
          "type": "integer",
          "minimum": 0,
          "description": "Minimum string length"
        },
        "maxLength": {
          "type": "integer",
          "minimum": 0,
          "description": "Maximum string length"
        },
        "pattern": {
          "type": "string",
          "description": "Regular expression pattern"
        },
        "minimum": {
          "type": "number",
          "description": "Minimum numeric value"
        },
        "maximum": {
          "type": "number",
          "description": "Maximum numeric value"
        },
        "enum": {
          "type": "array",
          "description": "Allowed values"
        }
      }
    },
    "WaitCondition": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["visible", "present", "hidden", "enabled", "text", "custom"],
          "description": "Type of wait condition"
        },
        "timeout": {
          "type": "integer",
          "minimum": 100,
          "maximum": 30000,
          "description": "Maximum wait time in milliseconds",
          "default": 5000
        },
        "text": {
          "type": "string",
          "description": "Expected text content (for text wait type)"
        },
        "customCondition": {
          "type": "string",
          "description": "JavaScript function body for custom wait condition"
        }
      }
    },
    "ExecutionCondition": {
      "type": "object",
      "required": ["type"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["element", "url", "text", "custom"],
          "description": "Type of execution condition"
        },
        "selector": {
          "type": "string",
          "description": "CSS selector for element conditions"
        },
        "urlPattern": {
          "type": "string",
          "description": "URL pattern that must match"
        },
        "text": {
          "type": "string",
          "description": "Text that must be present"
        },
        "customCondition": {
          "type": "string",
          "description": "JavaScript function body for custom condition"
        },
        "negate": {
          "type": "boolean",
          "default": false,
          "description": "Whether to negate the condition result"
        }
      }
    },
    "PrerequisiteCondition": {
      "type": "object",
      "required": ["type", "description"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["authentication", "permission", "feature", "element"],
          "description": "Type of prerequisite condition"
        },
        "description": {
          "type": "string",
          "description": "Human-readable description of prerequisite"
        },
        "selector": {
          "type": "string",
          "description": "CSS selector to check for element prerequisites"
        },
        "required": {
          "type": "boolean",
          "default": true,
          "description": "Whether this prerequisite is strictly required"
        }
      }
    },
    "WorkflowDefinition": {
      "type": "object",
      "required": ["description", "steps"],
      "properties": {
        "description": {
          "type": "string",
          "description": "Workflow description"
        },
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ParameterDefinition"
          },
          "description": "Workflow-level parameters"
        },
        "steps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkflowStep"
          },
          "description": "Ordered list of workflow steps"
        },
        "errorHandling": {
          "$ref": "#/definitions/ErrorHandling",
          "description": "Error handling strategy for workflow"
        }
      }
    },
    "WorkflowStep": {
      "type": "object",
      "required": ["capability"],
      "properties": {
        "capability": {
          "type": "string",
          "description": "Name of capability to execute"
        },
        "parameters": {
          "type": "object",
          "description": "Parameters to pass to capability"
        },
        "condition": {
          "$ref": "#/definitions/ExecutionCondition",
          "description": "Optional condition for step execution"
        },
        "onSuccess": {
          "type": "string",
          "description": "Next step to execute on success"
        },
        "onFailure": {
          "type": "string",
          "description": "Next step to execute on failure"
        },
        "retry": {
          "type": "object",
          "properties": {
            "attempts": {
              "type": "integer",
              "minimum": 1,
              "maximum": 5
            },
            "delay": {
              "type": "integer",
              "minimum": 100,
              "maximum": 10000
            }
          }
        }
      }
    },
    "ErrorHandling": {
      "type": "object",
      "properties": {
        "strategy": {
          "type": "string",
          "enum": ["abort", "continue", "retry", "fallback"],
          "description": "Error handling strategy"
        },
        "maxRetries": {
          "type": "integer",
          "minimum": 0,
          "maximum": 5,
          "description": "Maximum retry attempts"
        },
        "fallbackCapability": {
          "type": "string",
          "description": "Fallback capability to use on failure"
        }
      }
    },
    "EventDefinition": {
      "type": "object",
      "required": ["name", "description"],
      "properties": {
        "name": {
          "type": "string",
          "description": "Event name"
        },
        "description": {
          "type": "string",
          "description": "Event description"
        },
        "schema": {
          "type": "object",
          "description": "JSON Schema for event payload"
        },
        "examples": {
          "type": "array",
          "description": "Example event payloads"
        }
      }
    },
    "CapabilityExample": {
      "type": "object",
      "required": ["description", "parameters"],
      "properties": {
        "description": {
          "type": "string",
          "description": "Example description"
        },
        "parameters": {
          "type": "object",
          "description": "Example parameters"
        },
        "expectedResult": {
          "description": "Expected result from this example"
        }
      }
    }
  },
  "examples": [
    {
      "version": "1.0.0",
      "domain": "chat.openai.com",
      "title": "ChatGPT Web Interface",
      "description": "Automation contract for ChatGPT web interface interactions",
      "metadata": {
        "author": "Web-Buddy Team",
        "created": "2025-01-04T00:00:00Z",
        "updated": "2025-01-04T00:00:00Z",
        "compatibilityScore": 0.95,
        "tags": ["ai", "chatbot", "conversation"]
      },
      "context": {
        "urlPatterns": [
          "https://chat.openai.com/*",
          "https://chatgpt.com/*"
        ],
        "prerequisites": [
          {
            "type": "authentication",
            "description": "User must be logged into ChatGPT",
            "selector": "[data-testid='user-menu']"
          }
        ]
      },
      "capabilities": {
        "sendMessage": {
          "type": "action",
          "description": "Send a message to ChatGPT",
          "selector": "textarea[placeholder*='Message']",
          "parameters": [
            {
              "name": "message",
              "type": "string",
              "required": true,
              "description": "Message text to send",
              "validation": {
                "minLength": 1,
                "maxLength": 32000
              }
            }
          ],
          "returnType": {
            "type": "object",
            "schema": {
              "type": "object",
              "properties": {
                "messageId": { "type": "string" },
                "timestamp": { "type": "string" }
              }
            }
          },
          "examples": [
            {
              "description": "Send a simple question",
              "parameters": {
                "message": "What is the capital of France?"
              },
              "expectedResult": {
                "messageId": "msg_123",
                "timestamp": "2025-01-04T12:00:00Z"
              }
            }
          ]
        },
        "waitForResponse": {
          "type": "wait",
          "description": "Wait for ChatGPT response to complete",
          "selector": "[data-message-author-role='assistant']:last-child [data-testid='stop-button']",
          "wait": {
            "type": "hidden",
            "timeout": 30000
          },
          "returnType": {
            "type": "string",
            "description": "The response text from ChatGPT"
          }
        },
        "selectProject": {
          "type": "navigation",
          "description": "Select a ChatGPT project",
          "selector": "[data-testid='project-selector']",
          "parameters": [
            {
              "name": "projectName",
              "type": "string",
              "required": true,
              "description": "Name of project to select"
            }
          ]
        }
      },
      "workflows": {
        "askQuestion": {
          "description": "Complete workflow to ask a question and get response",
          "parameters": [
            {
              "name": "question",
              "type": "string",
              "required": true,
              "description": "Question to ask ChatGPT"
            },
            {
              "name": "project",
              "type": "string",
              "required": false,
              "description": "Optional project to use"
            }
          ],
          "steps": [
            {
              "capability": "selectProject",
              "parameters": { "projectName": "{{project}}" },
              "condition": {
                "type": "custom",
                "customCondition": "return !!parameters.project"
              }
            },
            {
              "capability": "sendMessage",
              "parameters": { "message": "{{question}}" }
            },
            {
              "capability": "waitForResponse"
            }
          ]
        }
      }
    }
  ]
}